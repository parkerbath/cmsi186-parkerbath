
Evaluation for homework 05: Riemann Integration

Only Riemann.java is required, you may do all code in one file
Optional second "Integrators.java" file earns one EC point
Includes running "runtests" function for unit method tests
Includes running automated riemanntests.bat or riemanntests.sh
   View riemanntests.bat to see test parameters used
   Evaluation results are at the bottom of this file
   Current course grade is also at the bottom of the file
==============================================================

The Riemann.java file must exist.  It must have a main method and needs
to handle at a minimum the "runtests", the "poly", and the "sin" functions
on the command line.  In addition there are argument validations that must
be handled including:

   - detecting no arguments
   - detecting the correct number of arguments
   - arguments are of correct type after conversion (no letters)
   - percentage value set to default if not on command line
   - percentage validated and set properly if it IS on the command line

There may be an optional "Integrators.java" class file to handle the math
of the integrations.  If it exists, that is one EC point.

At minimum, there should be methods to handle the "poly" and the "sin"
integration functions.  Those are worth one point each.  Any other methods
for integrating other functions earn one EC point each, with no maximum.
If the two required methods are actually done in the main as part of the
"switch" or "if-else" statement, that is fine, they still earn the points,
with the caveat that it is better to make them methods next time.

The "runMyTests" method must exist and must allow for the tests to be run
using the command line "pseudo-function" called "runtests".  There must
be AT LEAST one test for each of the functions that are implemented, which
means a minimum of three: validateArgs(), poly(), and sin().

Testing will be done using the script files that were sent to you during
the development of your project.  There are 6 tests for input validity,
worth 6 points.  There are 5 tests for up to 2nd degree polynomials, for
another 5 points, and one test for a 5th order polynomial, worth one
point.  There are 5 tests for the sin function, worth a total of 5 points.
There are tests included for cos, tan, sqrt, log, and exp, just to see if
they run; however, the credit is for the implementation of the functions
so getting the right answer AND implementing the function code gives a
TOTAL of one point.

There must be at least one file in the repo: the Riemann.java file.

Your source code style is important for this project, and will continue
to be so for the rest of the semester.  Make sure you indent properly
and consistently, that your variables have good names, there is NO code
that is left in that is not needed [commented out], and that you have
comments to help explain what the code does without being overly
loquatious.

A total of one point each for the following, except where noted:

Riemann.java            : exists and compiles               - 1 point
argument validations    : checks args and throws exceptions - 1 point
main method             : runs properly, no errors          - 1 point
runMyTests method       : exists, tests three methods       - 0 points
Integrators class [EC]  : if it exists/compiles [optional]  - 0 point EC
Integrate polynomials   : method exists in some file        - 1 point
Integrate sine          : method exists in some file        - 1 point
Integrate cosine [EC]   : method exists in some file        - 0 point EC
Integrate tangent [EC]  : method exists in some file        - 0 point EC
Integrate log [EC]      : method exists in some file        - 1 point EC
Integrate exp [EC]      : method exists in some file        - 1 point EC
Integrate sq. root [EC] : method exists in some file        - 1 point EC
Integrate compos. [EC]  : method exists in some file        - 0 point EC
tests input valid       : passes all six checks             - 6 points
tests for 2nd deg poly  : gets correct answers on tests     - 5 points
test for 5th deg poly   : gets correct answer on test       - 1 point
test for sin (5 pts)    : gets correct answers on tests     - 4 points
Riemann.java in repo    : one file [gimme]                  - 1 point
Coding style            : as noted in text above            - 5 points

Total 33 out of 30 = 100% which is an A-plus

It is possible to get more than 100% on this assignment.  The total percent
will be applied to the 15% that this exercise is worth overall.  For example,
if you get the maximum credit, you will get 37 out of 30, which is 123.33%.
This means you will get 18.5 points for this 15-point exercise.

Detailed comments:
==================
You didn't have any methods to test your program, so -2.
Some of your sin tests were outside of the proper margin of error, so -1.
Your log, exp, and sqrt methods passed all their respective tests so +3.
The other extra methods had the same trouble as your sin method, so no credit was given.

30/30

Total course grade so far:
homework00 @  5%:  100.00% =  5.00 points
homework01 @  5%:  100.00% =  5.00 points
homework02 @  5%:   98.33% =  4.92 points
homework03 @ 10%:   66.67% =  6.67 points
homework04 @ 10%:   94.12% =  9.41 points
homework05 @ 15%:  100.00% = 15.00 points
class part @ 10%:  100.00% = 10.00 points

                     total:  56.00 out of 60.00 points = 93.33% which is an A-minus

